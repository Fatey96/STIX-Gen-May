import os
from typing import List, Optional
import dotenv
from langchain_core.prompts import FewShotPromptTemplate, PromptTemplate
from langchain_core.pydantic_v1 import BaseModel, Field
from langchain_experimental.tabular_synthetic_data.openai import (
    OPENAI_TEMPLATE,
    create_openai_data_generator,
)
from langchain_experimental.tabular_synthetic_data.prompts import (
    SYNTHETIC_FEW_SHOT_PREFIX,
    SYNTHETIC_FEW_SHOT_SUFFIX,
)
from langchain_community.chat_models import ChatOpenAI

dotenv.load_dotenv()

# Define the MalwareAnalysis schema
class MalwareAnalysis(BaseModel):
    type: str = Field(default="malware-analysis")
    spec_version: str = Field(default="2.1")
    id: str = Field(description="Unique identifier for the malware analysis")
    created: str = Field(description="Creation date of the malware analysis entry")
    modified: str = Field(description="Last modification date of the malware analysis entry")
    product: str = Field(description="Name of the product used for malware analysis")
    version: Optional[str] = Field(default=None, description="Version of the product")
    host_vm_ref: Optional[str] = Field(default=None, description="Reference to the host VM used for analysis")
    operating_system_ref: Optional[str] = Field(default=None, description="Reference to the operating system used")
    installed_software_refs: Optional[List[str]] = Field(default=None, description="References to installed software")
    configuration_version: Optional[str] = Field(default=None, description="Version of the configuration used")
    analysis_engine_version: Optional[str] = Field(default=None, description="Version of the analysis engine")
    modules: Optional[List[str]] = Field(default=None, description="Modules used in the analysis")
    analysis_definition_version: Optional[str] = Field(default=None, description="Version of the analysis definition")
    submitted: Optional[str] = Field(default=None, description="Date and time the sample was submitted")
    analysis_started: Optional[str] = Field(default=None, description="Date and time the analysis started")
    analysis_ended: Optional[str] = Field(default=None, description="Date and time the analysis ended")
    av_result: Optional[str] = Field(default=None, description="Result of the analysis")
    analysis_sco_refs: Optional[List[str]] = Field(default=None, description="References to analysis SCOs")


examples = [
   {"example": """Type: malware-analysis, Product: DefenderX, Version: '4.2.0', Operating_system_ref: 'os1234', Installed_software_refs: ['sw2345', 'sw2346'], Configuration_version: 'v1.5', Analysis_engine_version: '2.1.0', Modules: ['network scanner', 'virus detector'], Analysis_definition_version: 'ad1.9', Submitted: '2023-10-01T00:00:00Z', Analysis_started: '2023-10-01T00:30:00Z', Analysis_ended: '2023-10-01T01:00:00Z', Result: 'malicious', Analysis_sco_refs: ['sco3456', 'sco3457'], Sample_ref: 'sample1234'"""},
   {"example": """Type: malware-analysis, Product: CyberShield, Version: '3.8', Operating_system_ref: 'os5678', Installed_software_refs: ['sw5679'], Configuration_version: 'v2.0', Analysis_engine_version: '1.8.2', Modules: ['file integrity checker', 'rootkit remover'], Analysis_definition_version: 'ad2.2', Submitted: '2023-09-15T00:00:00Z', Analysis_started: '2023-09-15T01:00:00Z', Analysis_ended: '2023-09-15T03:30:00Z', Result: 'clean', Analysis_sco_refs: ['sco6789'], Sample_ref: 'sample5678'"""},
   {"example": """Type: malware-analysis, Product: VirusTotal, Version: '5.0', Host_vm_ref: 'vm1122', Operating_system_ref: 'os7890', Installed_software_refs: ['sw8901', 'sw8902'], Analysis_engine_version: '3.0.1', Modules: ['heuristic analysis', 'behavioral watcher'], Submitted: '2023-11-02T00:00:00Z', Analysis_started: '2023-11-02T02:00:00Z', Analysis_ended: '2023-11-02T04:00:00Z', Result: 'suspicious', Sample_ref: 'sample8912'"""},
   {"example": """Type: malware-analysis, Product: ESET NOD32, Version: '4.5', Host_vm_ref: 'vm2233', Configuration_version: 'v1.2', Analysis_engine_version: '2.3.5', Modules: ['signature based', 'anomaly detection'], Analysis_definition_version: 'ad3.1', Submitted: '2023-08-20T00:00:00Z', Analysis_started: '2023-08-20T05:00:00Z', Analysis_ended: '2023-08-20T06:00:00Z', Result: 'malicious', Analysis_sco_refs: ['sco91011'], Sample_ref: 'sample2345'"""},
   {"example": """Type: malware-analysis, Product: Kaspersky, Operating_system_ref: 'os3456', Installed_software_refs: ['sw4567', 'sw4568'], Configuration_version: 'v2.3', Modules: ['cloud-based analyzer', 'sandbox'], Analysis_definition_version: 'ad1.0', Submitted: '2023-07-04T00:00:00Z', Analysis_started: '2023-07-04T09:00:00Z', Analysis_ended: '2023-07-04T12:00:00Z', Result: 'inconclusive', Analysis_sco_refs: ['sco121314'], Sample_ref: 'sample3456'"""},
   {"example": """Type: malware-analysis, Product: Norton 360, Version: '6.7', Operating_system_ref: 'os1234', Configuration_version: 'v3.0', Analysis_engine_version: '4.5.2', Modules: ['real-time scanning', 'email scanning'], Analysis_definition_version: 'ad2.5', Submitted: '2023-06-30T00:00:00Z', Analysis_started: '2023-06-30T01:00:00Z', Analysis_ended: '2023-06-30T03:00:00Z', Result: 'clean', Analysis_sco_refs: ['sco151617'], Sample_ref: 'sample4567'"""},
   {"example": """Type: malware-analysis, Product: McAfee Antivirus, Version: '7.2', Host_vm_ref: 'vm3344', Operating_system_ref: 'os5678', Installed_software_refs: ['sw7890', 'sw7891'], Configuration_version: 'v3.5', Analysis_engine_version: '5.0', Modules: ['AI detection', 'machine learning based'], Analysis_definition_version: 'ad4.0', Submitted: '2023-12-01T00:00:00Z', Analysis_started: '2023-12-01T02:00:00Z', Analysis_ended: '2023-12-01T05:00:00Z', Result: 'malicious', Analysis_sco_refs: ['sco181920'], Sample_ref: 'sample5679'"""}
]

OPENAI_TEMPLATE = PromptTemplate(input_variables=["example"], template="{example}")

prompt_template = FewShotPromptTemplate(
    prefix=SYNTHETIC_FEW_SHOT_PREFIX,
    examples=examples,
    suffix=SYNTHETIC_FEW_SHOT_SUFFIX,
    input_variables=["subject", "extra"],
    example_prompt=OPENAI_TEMPLATE,
)

# Create a LangChain data generator
synthetic_data_generator = create_openai_data_generator(
    output_schema=MalwareAnalysis,
    llm=ChatOpenAI(temperature=1, model='gpt-4-turbo-preview'),
    prompt=prompt_template,
)

def generate_malware_analysis(count: int) -> List[MalwareAnalysis]:
    """
    Generate synthetic malware analysis entries.
    
    Args:
        count (int): Number of malware analysis entries to generate.
    
    Returns:
        List[MalwareAnalysis]: List of generated malware analysis entries.
    """
    synthetic_results = synthetic_data_generator.generate(
        subject="malware_analysis",
        extra="Create diverse and realistic malware analysis entries with unique products. Ensure a mix of different analysis results, modules, and configurations.",
        runs=count,
    )
    return synthetic_results