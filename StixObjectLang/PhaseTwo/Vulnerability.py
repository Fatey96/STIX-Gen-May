import os
from typing import List, Optional
import dotenv
from langchain_core.prompts import FewShotPromptTemplate, PromptTemplate
from langchain_core.pydantic_v1 import BaseModel, Field
from langchain_experimental.tabular_synthetic_data.openai import (
    OPENAI_TEMPLATE,
    create_openai_data_generator,
)
from langchain_experimental.tabular_synthetic_data.prompts import (
    SYNTHETIC_FEW_SHOT_PREFIX,
    SYNTHETIC_FEW_SHOT_SUFFIX,
)
from langchain_community.chat_models import ChatOpenAI

dotenv.load_dotenv()

# Define the Vulnerability schema
class Vulnerability(BaseModel):
    type: str = Field(default="vulnerability")
    spec_version: str = Field(default="2.1")
    id: str = Field(description="Unique identifier for the vulnerability")
    created: str = Field(description="Creation date of the vulnerability entry")
    modified: str = Field(description="Last modification date of the vulnerability entry")
    name: str = Field(description="A name used to identify the Vulnerability")
    description: Optional[str] = Field(default=None, description="A description that provides more details and context about the Vulnerability")
    external_references: Optional[List[dict]] = Field(default=None, description="A list of external references which refer to non-STIX information")

# Sample data as examples
examples = [
    {"example": """Type: vulnerability, Name: CVE-2016-1234, External References: [{"source_name": "cve", "external_id": "CVE-2016-1234"}]"""},
    {"example": """Type: vulnerability, Name: Heartbleed, Description: The (1) TLS and (2) DTLS implementations in OpenSSL 1.0.1 before 1.0.1g do not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, as demonstrated by reading private keys, related to d1_both.c and t1_lib.c., External References: [{"source_name": "cve", "external_id": "CVE-2014-0160"}]"""},
    {"example": """Type: vulnerability, Name: EternalBlue, Description: The SMBv1 server in Microsoft Windows Vista SP2; Windows Server 2008 SP2 and R2 SP1; Windows 7 SP1; Windows 8.1; Windows Server 2012 Gold and R2; Windows RT 8.1; and Windows 10 Gold, 1511, and 1607; and Windows Server 2016 allows remote attackers to execute arbitrary code via crafted packets, aka "Windows SMB Remote Code Execution Vulnerability.", External References: [{"source_name": "cve", "external_id": "CVE-2017-0144"}]"""},
]

OPENAI_TEMPLATE = PromptTemplate(input_variables=["example"], template="{example}")

prompt_template = FewShotPromptTemplate(
    prefix=SYNTHETIC_FEW_SHOT_PREFIX,
    examples=examples,
    suffix=SYNTHETIC_FEW_SHOT_SUFFIX,
    input_variables=["subject", "extra"],
    example_prompt=OPENAI_TEMPLATE,
)

# Create a LangChain data generator
synthetic_data_generator = create_openai_data_generator(
    output_schema=Vulnerability,
    llm=ChatOpenAI(temperature=1, model='gpt-4-turbo-preview'),
    prompt=prompt_template,
)

def generate_vulnerabilities(count: int) -> List[Vulnerability]:
    """
    Generate synthetic vulnerability entries.
    
    Args:
        count (int): Number of vulnerability entries to generate.
    
    Returns:
        List[Vulnerability]: List of generated vulnerability entries.
    """
    synthetic_results = synthetic_data_generator.generate(
        subject="vulnerability",
        extra="Create diverse vulnerability entries with realistic names, descriptions, and CVE IDs. Ensure a mix of well-known and fictional vulnerabilities. For CVE IDs, use the format 'CVE-YYYY-NNNNN' where YYYY is a year and NNNNN is a 4-5 digit number.",
        runs=count,
    )
    return synthetic_results